---
// No server-side logic needed for this component
---

<div class="postcode-checker">
  <div class="header-section">
    <h1>üçå London Banana Postcode Explorer</h1>
    <p class="subtitle">Discover banana zone status for any London postcode</p>
  </div>
  
  <form id="postcodeForm" class="search-form">
    <div class="input-container">
      <div class="input-wrapper">
        <input 
          type="text" 
          id="postcodeInput" 
          name="postcode" 
          placeholder="Enter London postcode (e.g., SW1A 1AA, NW8 8TY, E1 6AN)"
          class="postcode-input"
          autocomplete="postal-code"
          maxlength="8"
        />
      </div>
      <button type="submit" class="search-btn">
        <span class="btn-text">Check</span>
      </button>
    </div>
  </form>

  <div id="result" class="result-card hidden">
    <div class="result-content"></div>
  </div>
  
  <div class="info-section">
    <h2>About the London Banana</h2>
    <p>"This is the London Banana. As long as you stay within the Banana, you'll have a great time in London. Almost everything outside the Banana is horrible these days, best avoid. Not clear why, or when this happened. But it is what it is."</p>
    <p class="citation">Inspired by <a href="https://x.com/Saul_Sadka/status/1959609109939892706/" target="_blank" rel="noopener noreferrer">@Saul_Sadka's viral tweet</a></p>
  </div>
</div>

<style>
  .postcode-checker {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    line-height: 1.6;
    color: #1a202c;
    max-width: 700px;
    margin: 0 auto;
    background: white;
    border-radius: 20px;
    padding: 2.5rem;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .header-section {
    text-align: center;
    margin-bottom: 3rem;
  }

  h1 {
    margin: 0 0 0.5rem 0;
    font-size: 2.5rem;
    font-weight: 800;
    color: #2d3748;
    letter-spacing: -0.02em;
  }

  .subtitle {
    margin: 0;
    font-size: 1.2rem;
    color: #718096;
    font-weight: 400;
  }

  .search-form {
    margin-bottom: 3rem;
  }

  .input-container {
    display: flex;
    gap: 1rem;
    align-items: stretch;
    background: #f8fafc;
    border-radius: 8px;
    padding: 0.5rem;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
  }

  .input-container:focus-within {
    border-color: #4299e1;
    box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
    background: white;
  }

  .input-wrapper {
    flex: 1;
    display: flex;
    align-items: center;
    position: relative;
  }

  .postcode-input {
    width: 100%;
    padding: 1rem 1.5rem;
    border: none;
    background: transparent;
    font-size: 1.1rem;
    font-family: inherit;
    outline: none;
    color: #2d3748;
    font-weight: 500;
    text-transform: uppercase;
  }

  .postcode-input::placeholder {
    color: #a0aec0;
    font-weight: 400;
    text-transform: none;
  }

  .search-btn {
    padding: 1rem 2rem;
    background: #FFD700;
    color: #2d3748;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    min-width: 140px;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(255, 215, 0, 0.3);
  }

  .search-btn:hover {
    background: #FFC700;
    transform: translateY(-1px);
    box-shadow: 0 4px 16px rgba(255, 215, 0, 0.4);
  }

  .search-btn:active {
    transform: translateY(0);
  }

  .btn-icon {
    font-size: 1.1rem;
  }

  .result-card {
    background: #ffffff;
    border-radius: 20px;
    border: none;
    overflow: hidden;
    animation: slideIn 0.4s ease-out;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    margin-top: 2rem;
  }

  .result-card.success {
    background: #00D084;
  }

  .result-card.error {
    background: #FF6B6B;
  }

  .result-card.not-banana {
    background: #FF8C42;
  }

  .result-card.loading {
    background: #4285F4;
    animation: pulse 2s infinite;
  }

  .result-content {
    padding: 1.5rem;
    color: white;
    font-size: 1rem;
    line-height: 1.4;
    font-weight: 500;
  }

  .result-header {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .result-data {
    display: grid;
    gap: 0.75rem;
    margin-top: 0;
  }

  .status-row {
    text-align: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.15);
    border-radius: 12px;
    backdrop-filter: blur(10px);
  }

  .status-text {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
  }

  .postcode-text {
    font-size: 0.9rem;
    opacity: 0.9;
    margin-top: 0.25rem;
  }

  .data-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
  }

  .data-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    backdrop-filter: blur(10px);
  }

  .data-item.full-width {
    grid-column: 1 / -1;
  }

  .data-icon {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .data-label {
    font-size: 0.8rem;
    opacity: 0.8;
    font-weight: 400;
    margin-bottom: 0.25rem;
  }

  .data-value {
    font-size: 1rem;
    font-weight: 600;
    line-height: 1.2;
  }

  .crime-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.25rem;
  }

  .crime-badge.crime-low {
    background: #c6f6d5;
    color: #22543d;
  }

  .crime-badge.crime-medium {
    background: #fbd38d;
    color: #7b341e;
  }

  .crime-badge.crime-high {
    background: #feb2b2;
    color: #742a2a;
  }

  .crime-details {
    display: block;
    font-size: 0.9rem;
    font-weight: 500;
    color: rgba(0, 0, 0, 0.6);
  }

  /* Dynamic result data styles */
  .result-data {
    display: grid;
    gap: 1rem;
  }

  .status-row {
    text-align: center;
    padding: 2rem 1.5rem;
    background: rgba(255, 255, 255, 0.15);
    border-radius: 16px;
    margin-bottom: 1.5rem;
    backdrop-filter: blur(10px);
  }

  .status-text {
    font-size: 1.2rem;
    font-weight: 700;
    margin: 0 0 0.75rem 0;
    line-height: 1.3;
    color: white;
  }

  .postcode-text {
    font-size: 1.4rem;
    font-weight: 800;
    letter-spacing: 2px;
    opacity: 0.9;
    margin: 0;
    color: white;
  }

  .data-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .data-item {
    background: rgba(255, 255, 255, 0.12);
    border-radius: 16px;
    padding: 1.5rem;
    text-align: center;
    backdrop-filter: blur(10px);
  }

  .data-item.full-width {
    grid-column: 1 / -1;
  }

  .data-icon {
    font-size: 2.2rem;
    display: block;
    margin-bottom: 1rem;
    line-height: 1;
  }

  .data-label {
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 600;
    opacity: 0.8;
    margin: 0 0 0.5rem 0;
    color: white;
  }

  .data-value {
    font-size: 1.2rem;
    font-weight: 800;
    margin: 0 0 0.25rem 0;
    line-height: 1.2;
    color: white;
  }

  .data-subtext {
    font-size: 0.85rem;
    opacity: 0.75;
    margin: 0;
    color: white;
  }



  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }

  .hidden {
    display: none;
  }

  .info-section {
    margin-top: 4rem;
    padding-top: 2.5rem;
    border-top: 2px solid #f1f5f9;
    text-align: center;
  }

  .info-section h2 {
    margin: 0 0 1.5rem 0;
    font-size: 1.5rem;
    color: #2d3748;
    font-weight: 700;
  }

  .info-section p {
    margin: 0;
    color: #4a5568;
    line-height: 1.8;
    font-size: 1.1rem;
  }

  .citation {
    font-size: 0.9rem;
    font-style: italic;
    margin-top: 1rem !important;
    color: #718096;
  }

  .citation a {
    color: #3182ce;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .citation a:hover {
    color: #2c5aa0;
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .postcode-checker {
      margin: 1rem;
      padding: 2rem;
    }

    .input-container {
      flex-direction: column;
      gap: 0.5rem;
    }

    .search-btn {
      min-width: auto;
      padding: 1.2rem;
    }

    h1 {
      font-size: 2rem;
    }

    .subtitle {
      font-size: 1rem;
    }

    .result-content {
      padding: 1rem;
      font-size: 0.9rem;
    }

    .result-header {
      font-size: 1.1rem;
      margin-bottom: 0.75rem;
    }

    .status-row {
      padding: 0.75rem;
    }

    .status-text {
      font-size: 1rem;
    }

    .postcode-text {
      font-size: 0.8rem;
    }

    .data-row {
      grid-template-columns: 1fr;
      gap: 0.5rem;
    }

    .data-item {
      padding: 0.75rem;
    }

    .data-value {
      font-size: 0.9rem;
    }

    .data-label {
      font-size: 0.75rem;
    }

    .data-icon {
      font-size: 1.25rem;
      margin-bottom: 0.25rem;
    }
  }
</style>

<script>
  import { checkPostcodeWithData } from '../utils/postcodeChecker.ts';

  // TypeScript declaration for gtag
  declare global {
    function gtag(...args: any[]): void;
  }

  const form = document.getElementById('postcodeForm') as HTMLFormElement;
  const input = document.getElementById('postcodeInput') as HTMLInputElement;
  const result = document.getElementById('result') as HTMLDivElement;

  function formatResultData(checkResult: any): string {
    const statusIcon = checkResult.isInBanana ? 'üçå' : '‚ùå';
    const statusText = checkResult.isInBanana ? 'Yes! In the London Banana zone!' : 'Not in the London Banana zone';
    
    // Status section with inline styles for guaranteed display
    let html = `
      <div style="text-align: center; padding: 1.2rem 1rem; background: rgba(255, 255, 255, 0.15); border-radius: 12px; margin-bottom: 1rem; backdrop-filter: blur(10px);">
        <span style="font-size: 2rem; display: block; margin-bottom: 0.5rem; line-height: 1;">${statusIcon}</span>
        <div style="font-size: 1rem; font-weight: 700; margin: 0 0 0.5rem 0; line-height: 1.3; color: white;">${statusText}</div>
        <div style="font-size: 1.1rem; font-weight: 800; letter-spacing: 1px; opacity: 0.9; margin: 0; color: white;">${checkResult.normalizedPostcode}</div>
      </div>
    `;

    if (checkResult.additionalData) {
      const { housePriceAverage, crimeRate, crimeDescription, location } = checkResult.additionalData;
      
      // Info cards with inline styles
      let cardsHtml = '';
      
      if (housePriceAverage) {
        cardsHtml += `
          <div style="background: rgba(255, 255, 255, 0.12); border-radius: 10px; padding: 1rem; text-align: center; backdrop-filter: blur(10px);">
            <span style="font-size: 1.5rem; display: block; margin-bottom: 0.5rem; line-height: 1;">üí∞</span>
            <div style="font-size: 0.7rem; text-transform: uppercase; letter-spacing: 1px; font-weight: 600; opacity: 0.8; margin: 0 0 0.25rem 0; color: white;">House Price</div>
            <div style="font-size: 1rem; font-weight: 800; margin: 0 0 0.15rem 0; line-height: 1.2; color: white;">¬£${housePriceAverage.toLocaleString()}</div>
            <div style="font-size: 0.75rem; opacity: 0.75; margin: 0; color: white;">Average</div>
          </div>
        `;
      }
      
      if (crimeRate !== undefined && crimeDescription) {
        cardsHtml += `
          <div style="background: rgba(255, 255, 255, 0.12); border-radius: 10px; padding: 1rem; text-align: center; backdrop-filter: blur(10px);">
            <span style="font-size: 1.5rem; display: block; margin-bottom: 0.5rem; line-height: 1;">üöî</span>
            <div style="font-size: 0.7rem; text-transform: uppercase; letter-spacing: 1px; font-weight: 600; opacity: 0.8; margin: 0 0 0.25rem 0; color: white;">Crime Rate</div>
            <div style="font-size: 1rem; font-weight: 800; margin: 0 0 0.15rem 0; line-height: 1.2; color: white;">${crimeDescription}</div>
            <div style="font-size: 0.75rem; opacity: 0.75; margin: 0; color: white;">${crimeRate} incidents/month</div>
          </div>
        `;
      }
      
      if (cardsHtml) {
        html += `<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.75rem; margin-bottom: 0.75rem;">${cardsHtml}</div>`;
      }
      
      if (location && location.district) {
        html += `
          <div style="background: rgba(255, 255, 255, 0.12); border-radius: 10px; padding: 1rem; text-align: center; backdrop-filter: blur(10px);">
            <span style="font-size: 1.5rem; display: block; margin-bottom: 0.5rem; line-height: 1;">üèõÔ∏è</span>
            <div style="font-size: 0.7rem; text-transform: uppercase; letter-spacing: 1px; font-weight: 600; opacity: 0.8; margin: 0 0 0.25rem 0; color: white;">Borough</div>
            <div style="font-size: 1rem; font-weight: 800; margin: 0; line-height: 1.2; color: white;">${location.district}</div>
          </div>
        `;
      }
    }

    return html;
  }

  function showResult(message: string, type: 'success' | 'error' | 'not-banana' | 'loading') {
    result.classList.remove('hidden');
    const resultContent = result.querySelector('.result-content') as HTMLDivElement;
    resultContent.innerHTML = message;
    result.className = `result-card ${type}`;
    result.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  async function handleSubmit(e: Event) {
    e.preventDefault();
    const postcode = input.value.trim();
    
    if (!postcode) {
              showResult('Please enter a postcode', 'error');
      return;
    }

    // Show loading state
    showResult('üîç Checking postcode and fetching data...', 'loading');

    try {
      const checkResult = await checkPostcodeWithData(postcode);
      
      if (!checkResult.isValid) {
        showResult(checkResult.message, 'error');
        // Track invalid postcode searches
        if (typeof gtag !== 'undefined') {
          gtag('event', 'postcode_search', {
            'search_term': postcode,
            'result_type': 'invalid'
          });
        }
        return;
      }

      // Track successful postcode searches
      if (typeof gtag !== 'undefined') {
        gtag('event', 'postcode_search', {
          'search_term': checkResult.normalizedPostcode,
          'result_type': checkResult.isInBanana ? 'banana_zone' : 'non_banana_zone',
          'house_price': checkResult.additionalData?.housePriceAverage || 0,
          'crime_rate': checkResult.additionalData?.crimeRate || 0
        });
      }

      // Format the result with structured HTML
      const formattedResult = formatResultData(checkResult);
      
      if (checkResult.isInBanana) {
        showResult(formattedResult, 'success');
      } else {
        showResult(formattedResult, 'not-banana');
      }
    } catch (error) {
      showResult('Error checking postcode. Please try again.', 'error');
      console.error('Postcode check error:', error);
    }
  }

  // Auto-format postcode as user types
  function formatPostcode(value: string): string {
    // Remove all spaces and convert to uppercase
    const cleaned = value.replace(/\s+/g, '').toUpperCase();
    
    // Add space before the last 3 characters if the postcode is long enough
    if (cleaned.length > 4) {
      return cleaned.slice(0, -3) + ' ' + cleaned.slice(-3);
    }
    
    return cleaned;
  }

  input.addEventListener('input', (e) => {
    const target = e.target as HTMLInputElement;
    const cursorPosition = target.selectionStart;
    const formattedValue = formatPostcode(target.value);
    
    target.value = formattedValue;
    
    // Restore cursor position
    if (cursorPosition !== null) {
      target.setSelectionRange(cursorPosition, cursorPosition);
    }
  });

  form.addEventListener('submit', handleSubmit);

  // Allow pressing Enter to submit
  input.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      handleSubmit(e);
    }
  });
</script>